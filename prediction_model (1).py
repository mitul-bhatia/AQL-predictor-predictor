# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fBadwP--Tz7Q2BowpGdP2zwk4MkcRdbu
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt

# Step 1: Loa the PM2.5 and PM10 datasets
pm25_data = pd.read_csv('/content/air-quality-india.csv')
pm10_data = pd.read_csv('/content/PM10 refined.csv')

# Step 2: Process the PM10 dataset.
pm10_data[['Date', 'Hour']] = pm10_data['month/date/year time'].str.split(' ', expand=True)
pm10_data[['Month', 'Day', 'Year']] = pm10_data['Date'].str.split('/', expand=True)
pm10_data['Hour'] = pm10_data['Hour'].str.replace(':00', '').astype(int)
pm10_data['Month'] = pm10_data['Month'].astype(int)
pm10_data['Day'] = pm10_data['Day'].astype(int)

# Step 3: Prepare PM2.5 data
features_pm25 = pm25_data[['Month', 'Day', 'Hour']]
target_pm25 = pm25_data['PM2.5']

# Step 4: Split data into trainig and test sets for PM2.5
X_train_pm25, X_test_pm25, y_train_pm25, y_test_pm25 = train_test_split(features_pm25, target_pm25, test_size=0.2, random_state=42)

# Step 5: Scale the features for PM2.5
scaler_pm25 = StandardScaler()
X_train_scaled_pm25 = scaler_pm25.fit_transform(X_train_pm25)

# Step 6: Build Random Forest model for PM2.5
rf_model_pm25 = RandomForestRegressor(n_jobs=-1)
rf_model_pm25.fit(X_train_scaled_pm25, y_train_pm25)

# Step 7: Predict for a specific month and day for PM2.5
input_month = int(input("Enter the month (1-12): "))
input_day = int(input("Enter the day (1-31): "))
predicted_pm25_day = []

# Predict for all 24 hours of the specified day
for hour in range(24):
    input_data = pd.DataFrame([[input_month, input_day, hour]], columns=['Month', 'Day', 'Hour'])
    input_data_scaled = scaler_pm25.transform(input_data)
    predicted_pm25 = rf_model_pm25.predict(input_data_scaled)
    predicted_pm25_day.append(predicted_pm25[0])

# Print predicted hourly data for PM2.5
print("Predicted PM2.5 Hourly Data:")
for hour, value in enumerate(predicted_pm25_day):
    print(f"Hour {hour}: {value:.2f} µg/m³")

# Step 8: Plot the predictions for PM2.5
plt.figure(figsize=(10, 6))
plt.plot(range(24), predicted_pm25_day, label="PM2.5", color="blue", marker='o')
plt.title(f"PM2.5 Predictions for {input_month}/{input_day}")
plt.xlabel("Hour")
plt.ylabel("Concentration (µg/m³)")
plt.legend()
plt.grid(True)
plt.show()

# Step 9: Prepare PM10 data
features_pm10 = pm10_data[['Month', 'Day', 'Hour']]
target_pm10 = pm10_data['PM10']

# Step 10: Split data into training and test sets for PM10
X_train_pm10, X_test_pm10, y_train_pm10, y_test_pm10 = train_test_split(features_pm10, target_pm10, test_size=0.2, random_state=42)

# Step 11: Scale the features for PM10
scaler_pm10 = StandardScaler()
X_train_scaled_pm10 = scaler_pm10.fit_transform(X_train_pm10)

# Step 12: Build Random Forest model for PM10
rf_model_pm10 = RandomForestRegressor(n_jobs=-1)
rf_model_pm10.fit(X_train_scaled_pm10, y_train_pm10)

# Step 13: Predict for the same specific month and day for PM10
predicted_pm10_day = []

# Predict for all 24 hours of the specified day
for hour in range(24):
    input_data = pd.DataFrame([[input_month, input_day, hour]], columns=['Month', 'Day', 'Hour'])
    input_data_scaled = scaler_pm10.transform(input_data)
    predicted_pm10 = rf_model_pm10.predict(input_data_scaled)
    predicted_pm10_day.append(predicted_pm10[0])

# Print predicted hourly data for PM10
print("\nPredicted PM10 Hourly Data:")
for hour, value in enumerate(predicted_pm10_day):
    print(f"Hour {hour}: {value:.2f} µg/m³")

# Step 14: Plot the predictions for PM10
plt.figure(figsize=(10, 6))
plt.plot(range(24), predicted_pm10_day, label="PM10", color="red", marker='x')
plt.title(f"PM10 Predictions for {input_month}/{input_day}")
plt.xlabel("Hour")
plt.ylabel("Concentration (µg/m³)")
plt.legend()
plt.grid(True)
plt.show()



def calculate_aqi_pm25(pm25):
    if pm25 <= 12:
        return (pm25 / 12) * 50
    elif pm25 <= 35.4:
        return ((pm25 - 12) / (35.4 - 12)) * (100 - 51) + 51
    elif pm25 <= 55.4:
        return ((pm25 - 35.5) / (55.4 - 35.5)) * (150 - 101) + 101
    elif pm25 <= 150.4:
        return ((pm25 - 55.5) / (150.4 - 55.5)) * (200 - 151) + 151
    elif pm25 <= 250.4:
        return ((pm25 - 150.5) / (250.4 - 150.5)) * (300 - 201) + 201
    else:
        return 500

def calculate_aqi_pm10(pm10):
    if pm10 <= 54:
        return (pm10 / 54) * 50
    elif pm10 <= 154:
        return ((pm10 - 54) / (154 - 54)) * (100 - 51) + 51
    elif pm10 <= 254:
        return ((pm10 - 155) / (254 - 155)) * (150 - 101) + 101
    elif pm10 <= 354:
        return ((pm10 - 255) / (354 - 255)) * (200 - 151) + 151
    elif pm10 <= 424:
        return ((pm10 - 355) / (424 - 355)) * (300 - 201) + 201
    else:
        return 500

# Define hours for the 24-hour range
hours = range(24)

# After predicting PM2.5 and PM10, calculate AQI
predicted_aqi_pm25 = [calculate_aqi_pm25(pm25) for pm25 in predicted_pm25_day]
predicted_aqi_pm10 = [calculate_aqi_pm10(pm10) for pm10 in predicted_pm10_day]

# Print AQI values along with the predictions
print("Predicted PM2.5 and AQI for the day:")
for hour, (pm25, aqi) in enumerate(zip(predicted_pm25_day, predicted_aqi_pm25)):
    print(f"Hour {hour}: PM2.5 = {pm25}, AQI = {aqi}")

print("Predicted PM10 and AQI for the day:")
for hour, (pm10, aqi) in enumerate(zip(predicted_pm10_day, predicted_aqi_pm10)):
    print(f"Hour {hour}: PM10 = {pm10}, AQI = {aqi}")

# Prepare data for plotting AQI values from PM2.5
hours = range(24)  # Assuming you have 24 hours of predictions

# Plot AQI values for PM2.5
plt.figure(figsize=(10, 6))
plt.plot(hours, predicted_aqi_pm25, label="AQI PM2.5", color="green", marker='o')

plt.title(f"AQI PM2.5 Predictions for {input_month}/{input_day}")
plt.xlabel("Hour")
plt.ylabel("AQI Level")
plt.legend()
plt.grid(True)
plt.show()

# Define AQI conditions and corresponding power usage
def power_usage_based_on_aqi(aqi):
    if aqi <= 25:
        return "Good (Minimal power usage)"
    elif 26 <= aqi <= 60:
        return "Moderate (Low power usage)"
    elif 61 <= aqi <= 85:
        return "Unhealthy for Sensitive Groups (Moderate power usage)"
    elif 86 <= aqi <= 110:
        return "Unhealthy (High power usage)"
    elif 111 <= aqi <= 160:
        return "Very Unhealthy (Very high power usage)"
    else:
        return "Hazardous (Extreme power usage)"

# Calculate power usage for each hour based on predicted AQI PM2.5
power_usage = []

for aqi in predicted_aqi_pm25:
    usage = power_usage_based_on_aqi(aqi)
    power_usage.append(usage)

# Print the power usage condition for each hour
for hour, usage in zip(hours, power_usage):
    print(f"Hour {hour}: {usage}")